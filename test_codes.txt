Example 1: Array Manipulation (Bubble Sort)
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
           

array = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(array)
Example 2: Graph Traversal (Breadth-First Search)
def bfs(graph, start_node):
    visited = set()
    queue = [start_node]
    
    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.add(node)
  
            for neighbor in graph.get(node, []):
                if neighbor not in visited:
                    queue.append(neighbor)

graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
bfs(graph, 'A')
Example 3: Tree Traversal (In-Order Traversal)
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def inorder_traversal(node):
    if node:
        inorder_traversal(node.left)
        inorder_traversal(node.right)

root = TreeNode(1)
root.right = TreeNode(2)
root.right.left = TreeNode(3)

inorder_traversal(root)
Example 4: Fibonacci Sequence Calculation
def fibonacci(n):
    a, b = 0, 1
    sequence = []
    for _ in range(n):
        sequence.append(a)
        a, b = b, a + b
     
fibonacci(10)
Example 5: DFS Traversal on a Graph
def dfs(graph, node, visited=None):
    if visited is None:
        visited = set()
    if node not in visited:
        visited.add(node)
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                dfs(graph, neighbor, visited)

graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}
dfs(graph, 'A')
Example 6: Stack Operations
stack = []

def push(stack, value):
    stack.append(value)


def pop(stack):
    if stack:
        value = stack.pop()

        return value

push(stack, 10)
push(stack, 20)
push(stack, 30)
pop(stack)
pop(stack)
Example 7: Queue Operations
from collections import deque

queue = deque()

def enqueue(queue, value):
    queue.append(value)


def dequeue(queue):
    if queue:
        value = queue.popleft()
 
        return value

enqueue(queue, 10)
enqueue(queue, 20)
enqueue(queue, 30)
dequeue(queue)
dequeue(queue)

# Memoization (Top-Down) - Using Recursion and Cache
def fibonacci_memo(n, memo={}):
    if n <= 1:
        return n
    if n not in memo:
        memo[n] = fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo)
    return memo[n]

# Example Usage
n = 10
print(f"Fibonacci of {n} (Memoization):", fibonacci_memo(n))
# Tabulation (Bottom-Up) - Iterative approach
def fibonacci_tab(n):
    if n <= 1:
        return n
    table = [0] * (n+1)
    table[1] = 1
    for i in range(2, n+1):
        table[i] = table[i-1] + table[i-2]
    return table[n]

# Example Usage
n = 10
print(f"Fibonacci of {n} (Tabulation):", fibonacci_tab(n))
# 0/1 Knapsack (Tabulation) - Bottom-Up Approach
def knapsack_tab(weights, values, W, n):
    table = [[0] * (W + 1) for _ in range(n + 1)]
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                table[i][w] = 0
            elif weights[i-1] <= w:
                table[i][w] = max(values[i-1] + table[i-1][w-weights[i-1]], table[i-1][w])
            else:
                table[i][w] = table[i-1][w]
    return table[n][W]

# Example Usage
weights = [2, 3, 4, 5]
values = [3, 4, 5, 6]
W = 5  # Weight limit
n = len(weights)
print("Maximum value (Tabulation):", knapsack_tab(weights, values, W, n))
